#!/bin/bash

# TODO:
# ------------------------------------------------------------------------------
# - end of list in all modes is controlled by "loop" flag/playback mode/control
# - PC_REPLAY control
# - try to have a way to specify / know of logfiles as early as possible, to log
#   initialization before env (ideally right at the start)
# - allow FALSE flags from CLI
# - add minfilesize maxfilesize
#
# - manage()
#       fix symlink path generation in dst
#       add option for flat/preserve structure
#       honor all controls from view_file() and use $playback
#       cleanup / simplify
#
# - add
#       --help
#       options for global/per file rate change effects
#       regex/glob filters and listings
#
# - write initial README
# - use exit and return instead of retcode where it's clearer/better
# - verbosity levels
# - add dev branch
# - add auto version
# ------------------------------------------------------------------------------
# - view() and manage()
#       online help (? option)
#       online menu (m option)
#           rate, confirmation, pause, random mode, quiet mode, min/max width/height, auto-max, file info
#
# - view_file()
#       mini help (press h)
#       status line/box (press l)
# ------------------------------------------------------------------------------
# - chores
#       modularize and source/call only what's needed
#       full doc
#
# - features
#       --minwidth, --minheight, --maxwidth, --maxheight (in view mode, only with type dir)
#       --auto-max (in view mode, only with type dir)
#       --auto-viewport
#       format exports
#       remote control
#       URL view / browse / crawl / manage
#
# - UI
#       integrate view/manage modes
#       full TUI
#       file explorer


# BASICS -----------------------------------------------------------------------
shopt -s extglob

# "somewhat sane" true and false
# opposite semantics for return values and arithmetic tests, courtesy of bash
declare -i FALSE=1
declare -i TRUE=$(( !FALSE ))


# CONFIG -----------------------------------------------------------------------
declare -A CONFIG

pretty_print() {
    local -n var="$1"
    local k name
    local -a TF=( [$TRUE]=TRUE [$FALSE]=FALSE )

    for k in ${!var[@]}; do
        name=${k##*__}
        echo "$name=$(
            if [[ $(conf type $name) == bool ]]; then
                echo ${TF[$(conf get $name)]}
            else conf get $name
            fi
        )"
    done | tr '\n' ',' | sed -re '1 s/^/[/' -e '$ s/,$/]/'
}

conf() {
    local k v test
    local -i get gettype

    case $1 in
        unset) unset "CONFIG[$2]"
               return $TRUE
               ;;
          get) get=$TRUE k="$2"         ;;
         type) gettype=$TRUE k="$2"     ;;
        print) pretty_print CONFIG      ;;
       @(*=*)) k="${1%%=*}" v="${1#*=}" ;;
            *) k="$1"                   ;;
    esac

    [[ -v v ]] && {
        case "$v" in
             TRUE|FALSE) CONFIG[__bool__$k]=${!v} ;;
            ''|*[!0-9]*) CONFIG[__str__$k]="$v"   ;;
                      *) CONFIG[__int__$k]=$v     ;;
        esac
        return $TRUE
    }

    for t in bool int str; do
        test="__${t}__${k}"
        [[ -v CONFIG[$test] ]] && {
            [[ -v get ]] && echo ${CONFIG[$test]}
            [[ -v gettype ]] && echo $t
            [[ $t == bool ]] && return ${CONFIG[$test]}
            return $TRUE
        }
    done

    return $FALSE
}


# CODES ------------------------------------------------------------------------
declare -Ai RETCODES=(
    # types
    [TRUE]=$TRUE
    [FALSE]=$FALSE
    [T_UNDEF]=3
    [T_BOOL]=4
    [T_INT]=5
    [T_STR]=6

    # process result
    [P_SUCCESS]=$TRUE
    [P_NOOP]=10
    [P_ERROR]=11
    [P_ABORT]=12
    [P_NOCMD]=13
    [P_NOTOK]=14

    # playback control
    [PC_PLAY]=20
    [PC_STOP]=21
    [PC_PAUSE]=22
    [PC_CONT]=23
    [PC_PREV]=24
    [PC_NEXT]=25
    [PC_R_UP]=26
    [PC_R_DOWN]=27
    [PC_R_UP2]=28
    [PC_R_DOWN2]=29
    [PC_MENU]=30
    [PC_HELP]=31
)

retcode() {
    case "$1" in
        val) echo ${RETCODES[$2]} ;;
        key) for k in ${!RETCODES[@]}; do
                (( RETCODES[$k] == $2 )) && {
                    echo $k
                    $FUNCNAME TRUE
                }
             done
             $FUNCNAME FALSE      ;;
        *) return ${RETCODES[$1]} ;;
    esac
}

noop() {
    retcode NOOP
}


# I/O --------------------------------------------------------------------------
clear_stdin() {
    read -t 0 && while read -e -t 0.1; do :; done
}

confirm() {
    conf yes || {
        echo
        read -r -p "${1:-Are you sure? (y/N)} " response
        [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
    }
}

msg() {
    (( $# )) && {
        echo -e "$@" >&2
        return
    }
    cat >&2
}

header() {
    local tmp="${@}" length=80 char='-'
    local header=$(printf "%0$(( length - ${#tmp} ))d")
    msg "\n$@ ${header//?/${char}}\n"
}

error() {
    local code=${1}

    if [[ -v RETCODES[$code] ]]; then shift
    else code=P_ERROR
    fi

    (( $# )) && msg "$FUNCNAME: $@"
    log "$code $@"
    retcode $code
    exit
}

log() {
    [[ -n "$(conf get logfile)" ]] && echo "${FUNCNAME[1]}: $@" >> "$(conf get logfile)"
}


# MISC UTILS -------------------------------------------------------------------
file_list() {
    find "$(conf get src)" -iname "*.ans" |
        {
            if conf random; then shuf
            else cat
            fi
        }
}

new_tmp () {
    local suffix="${1}"
    mktemp -tu $(conf get script_name)${suffix}.$(printf 'X%.0s' {1..10})
}

new_pipe() {
    local pipe="$(new_tmp playback)"
    mkfifo "$pipe"
    log "created pipe by request of ${FUNCNAME[1]}: $pipe"
    echo "$pipe"
}


# PLAYBACK ---------------------------------------------------------------------
playback_control() {
    local -A control_mappings=(
        [_]=PC_PLAY     # this is a space
        [h]=PC_HELP
        [m]=PC_MENU
        [n]=PC_NEXT
        [p]=PC_PREV
        [q]=PC_STOP
        [u]=PC_R_UP
        [d]=PC_R_DOWN
        [U]=PC_R_UP2
        [D]=PC_R_DOWN2
    )

    local key controls="${!control_mappings[@]}"

    IFS=''
    while :; do
        read -t 0.1 -s -N 1 -d '' key
        clear_stdin

        key="${key// /_}"
        if [[ $key =~ [${controls// /}] ]]; then echo ${control_mappings[$key]}
        else echo NOOP
        fi
    done
}

change_rate() {
    local rate=$(conf get rate) big=$(conf get rate_factor_big) small=$(conf get rate_factor_small)
    case $1 in
           PC_R_UP) (( rate += small )) ;;
          PC_R_UP2) (( rate += big ))   ;;
         PC_R_DOWN) (( rate -= small )) ;;
        PC_R_DOWN2) (( rate -= big ))   ;;
    esac
    conf rate=$(( rate < 1 ? 1 : rate ))
    log "updated rate to $(conf get rate)"
}


# COMMANDS ---------------------------------------------------------------------
view_file() {
    local file="${1:-$(conf get src)}" playback control reader writer pipe="$(new_pipe)"
    local rf_small=$(conf get rate_factor_small) rf_big=$(conf get rate_factor_big)

    conf quiet || echo -e "\nFile: $file"
    log "viewing file: $file"

    conf "stty=$(stty -g)"

    { tr '\0' ' ' < "$file" | iconv -f 437 -t utf8 > "$pipe" ;} & writer=$!
    pv --quiet -C -B32 --rate-limit $(conf get rate) < "$pipe" & reader=$!

    trap noop INT

    playback=PC_PLAY
    while kill -0 "$reader" &> /dev/null; do
        unset control
        read -t0.5 control
        [[ ! $control == NOOP ]] && log "got playback control $control"

        case $control in
            PC_PLAY)
                if [[ $playback == PC_PLAY ]]; then
                    playback=PC_PAUSE
                    pv -R $reader --rate-limit 1
                elif [[ $playback == PC_PAUSE ]]; then
                    playback=PC_PLAY
                    pv -R $reader --rate-limit $(conf get rate)
                fi
                log "playback changed to $playback"         ;;
            PC_R_@(UP|DOWN)?(2))
                change_rate $control
                pv -R $reader --rate-limit $(conf get rate) ;;
            PC_@(NEXT|PREV|HELP|MENU))
                playback=$control
                log "playback changed to $playback"
                break                                       ;;
            PC_STOP) [[ $playback == PC_PLAY ]] && playback=PC_STOP
                log "playback changed to $playback"
                break                                       ;;
        esac
    done< <(playback_control)

    trap - INT

    kill $writer $reader &> /dev/null

    stty "$(conf get stty)"
    echo -e '\033[0m'

    rm $pipe

    retcode $playback
}

view() {
    local playback control sleeper

    local -a playlist
    readarray -t playlist< <(file_list)
    local total=${#playlist[@]}

    (( $(conf get count) )) || conf count=$total

    log "$(conf get count) images (max $total) from $(conf get src)"

    playback=PC_PLAY

    local i
    for (( i = 0; i < $(conf get count) && i < total; i++ )); do
        log "list pointer $i"

        if [[ $playback =~ ^PC_(PLAY|NEXT|PREV)$ ]]; then
            view_file "$(readlink -f "${playlist[$i]}")"
            playback=$(retcode key $?)
        fi

        # next/prev skip pause since they jump around the playlist
        (( $(conf get pause) && i + 1 < $(conf get count) && i + 1 < total )) &&
        [[ $playback == PC_PLAY || $playback == PC_PAUSE ]] &&  {
            log "enter pause: $(conf get pause) seconds"

            ( sleep $(( $(conf get pause) )) ) & sleeper=$!

            while kill -0 $sleeper &> /dev/null; do
                unset control
                read -t0.5 control
                log "got playback control $control while pausing"

                case $control in
                    PC_PLAY)
                        if [[ $playback == PC_PLAY ]]; then playback=PC_PAUSE
                        elif [[ $playback == PC_PAUSE ]]; then playback=PC_PLAY
                        fi
                        break                                 ;;
                    PC_@(STOP|NEXT|PREV))
                        playback=$control
                        break                                 ;;
                    PC_R_@(UP|DOWN)?(2)) change_rate $control ;;
                    PC_@(HELP|MENU)) break                    ;;
                    *) continue                               ;;
                esac
            done< <(playback_control)

            log "exit pause"
        }

        log "list playback is $playback"

        case $playback in
            PC_STOP) break                  ;;
            PC_PAUSE) (( i-- )) ; continue  ;; # freeze arrow
            PC_PREV) (( i -= (i ? 2 : 1) )) ;; # move arrow
        esac

        conf clear && clear
        conf reset && reset
    done
}

manage() {
    local base="$(basename "$(readlink -f "$(conf get src)")")"
    local file symlink symlink_dir symlink_exists prompt choice

    local -a files
    readarray -t files< <(file_list)
    local total=${#files[@]}

    (( $(conf get count) )) || conf count=$total

    local i
    for (( i = 0; i < $(conf get count) && i < total; i++ )); do
        log "list pointer $i"

        trap noop INT
        file="$(readlink -f "${files[$i]}")"

        if [[ -n $(conf get dst) ]]; then
            symlink="$base${file##*$base}"
            symlink_dir="$(dirname "$(conf get dst)/$symlink")"

            symlink_exists=0
            [[ -L "$(conf get dst)/$symlink" ]] && {
                conf include_linked && continue
                symlink_exists=1
            }
        fi

        # view file loop
        while :; do
            view_file "$file"
            clear_stdin

            if [[ -z $(conf get dst) ]]; then prompt='delete/prev/replay/next/quit (d/p/r/n/q)'
            else
                if (( symlink_exists )); then
                    msg "This file is already linked."
                    prompt='unlink/delete/prev/replay/next/quit (l/d/p/r/n/q)'
                else
                    prompt='link/delete/prev/replay/next/quit (l/d/p/r/n/q)'
                fi
            fi

            # ensure-valid-choice loop
            while read -n1 -p "${prompt}? " choice; do
                case "$choice" in
                    d) confirm || continue 3
                       rm -v "$file"                    ;&

                    l) if (( symlink_exists )); then
                           [[ "$choice" == l ]] && { confirm || continue 3 ;}
                           rm -v "$(conf get dst)/$symlink"

                           while [[ "$symlink_dir" != "$(conf get dst)/$base" ]] && [[ -z "$(find "$symlink_dir" -mindepth 1)" ]]; do
                               rmdir -v "$symlink_dir"
                               symlink_dir="$(dirname "$symlink_dir")"
                           done
                       # check we're not cascading from d) before creation
                       elif [[ "$choice" == l ]]; then
                           [[ -d "$symlink_dir" ]] || mkdir -vp "$symlink_dir"
                           ln -sv "$file" "$(conf get dst)/$symlink"
                       fi

                       continue 3                       ;;

                    p) (( i -= (i ? 2 : 1) ))
                       continue 3                       ;;
                    n) continue 3                       ;;
                    r) continue 2                       ;;
                    q) echo -e "Bye!\n"
                       return ${RETCODES[P_SUCCESS]}     ;;
                esac
            done
        done

        trap - INT
    done
}


# PROGRAM ----------------------------------------------------------------------
init() {
    # config priority: defaults < config < env < cli
    log "$(conf get script_title) $(conf get script_version) initializing config"

    # defaults
    conf script_dir="$(dirname $(readlink -f "$0"))"
    conf script_name="$(basename "$0")"
    [[ -f "$(conf get script_dir)/VERSION" ]] && conf script_version=$(cat "$(conf get script_dir)/VERSION")
    conf script_title=bart
    conf script_env_prefix=$(conf get script_title | sed -r 's/./\U&/g')
    conf config=''
    conf logfile=''
    conf src=''
    conf dst=''
    conf rate=5000
    conf rate_factor_small=30
    conf rate_factor_big=150
    conf count=0
    conf pause=0
    conf include_linked=FALSE
    conf yes=FALSE
    conf quiet=FALSE
    conf random=FALSE
    conf automax=FALSE
    conf autovp=FALSE
    conf maxw=0
    conf minw=0
    conf maxh=0
    conf minh=0

    local k kenv
    for k in ${!CONFIG[@]}; do
        [[ $k =~ ^[^=]+__script_[^=]+=.*$ ]] && continue
        k=${k##*__} ; kenv=$(conf get script_env_prefix)_${k^^}
        [[ -v $kenv ]] && {
            log "found option from environment: $k=${!kenv}"
            conf $k=${!kenv}
        }
    done
    log "done processing defaults and env, current config is $(conf print)"

    [[ -f "$(conf get config)" ]] && {
        log "processing config file: $(conf get config)"
        while read line; do
            [[ $line =~ ^script_.* ]] && continue
            k=$(conf get script_env_prefix)_${line%%=*}
            [[ ! -v "${k^^}" ]] && {
                log "found option from config file: $line"
                conf "$line"
            }
        done< <(cat "$(conf get config)")
        log "done processing config file, current config is $(conf print)"
    }

    (( $# )) && {
        log "processing CLI: $@"

        # cli
        local command=$1 allowed_commands="view?(_file)|manage"
        case $command in
            @($allowed_commands))
                log "CLI got command: $command"
                conf script_command=$command  ;;
            *) error P_NOCMD "unrecognized command $command"   ;;
        esac

        shift

        local token k skip=FALSE src_cli=FALSE dst_cli=FALSE
        while :; do
            (! retcode $skip) && token="$1" && shift
            skip=FALSE

            case "$token" in
                -@(l*|-include-linked)) k='include_linked=TRUE' ;;
                        -@(r*|-random)) k='random=TRUE'         ;;
                         -@(c*|-clear)) k='clear=TRUE'          ;;
                         -@(R*|-reset)) k='reset=TRUE'          ;;
                         -@(q*|-quiet)) k='quiet=TRUE'          ;;
                           -@(y*|-yes)) k='yes=TRUE'            ;;
                      -@(A*|-auto-max)) k='auto_max=TRUE'       ;;
                 -@(V*|-auto-viewport)) k='auto_viewport=TRUE'  ;;
                         -@(n|-count)*) k=count                 ;;
                          -@(t|-rate)*) k=rate                  ;;
                         -@(p|-pause)*) k=pause                 ;;
                      -@(w|-minwidth)*) k=min_width             ;;
                      -@(W|-maxwidth)*) k=max_width             ;;
                     -@(h|-minheight)*) k=min_height            ;;
                     -@(H|-maxheight)*) k=max_height            ;;
                       -@(L|-logfile)*) k=logfile               ;;
                                 !(-*)) if ! retcode $src_cli; then
                                            log "CLI got src: $token"
                                            src_cli=TRUE
                                            conf src="$token"
                                            continue
                                        elif ! retcode $dst_cli; then
                                            log "CLI got dst: $token"
                                            dst_cli=TRUE
                                            conf dst="$token"
                                            continue
                                        fi                      ;;
            esac

            [[ -v k ]] || error P_NOTOK "unrecognized token $token"

            if [[ $k =~ ^[^=]+=(TRUE|FALSE)$ ]]; then
                log "CLI got flag: $k"
                conf "$k"

                [[ $token =~ ^-[[:alpha:]][^-]+$ ]] && {
                    token="-${token:2}"
                    log "CLI found more short options to try: $token"
                    skip=TRUE
                }
            elif [[ $token =~ ^-[[:alpha:]][[:digit:]]+$ ]]; then
                log "CLI short option: $token ($k=${token:2})"
                conf "$k=${token:2}"
            elif [[ $token =~ ^-{1,2}[[:alnum:]]+$ ]]; then
                log "CLI option with space: $token ($k=$1)"
                conf "$k=$1"
                shift
            elif [[ $token =~ ^-{1,2}[[:alnum:]]+(=.+)$ ]]; then
                log "CLI option with equal: $token ($k=${token##*=})"
                conf "$k=${token##*=}"
            fi

            unset k
            retcode $skip || (( $# )) || break
        done

        log "done processing CLI, current config is $(conf print)"
    }

    log "done processing configuration"
    retcode P_SUCCESS
}

init $@ && $(conf get script_command)
